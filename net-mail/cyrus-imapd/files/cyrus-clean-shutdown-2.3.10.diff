Clean Shutdown

The instructions for Cyrus say to send a signal to master to shut
the system down.  This generally means a SIGTERM.

When master gets a SIGTERM is sends SIGTERM to all children, who
don't trap it and exit instantly.  Fine if you're never in a
"critical section"

Unfortunately both replication and fast rename create critical
sections.  Fast rename thanks to split meta (two renames) and
replication because if you have successfully committed a message
to the index file but not yet logged the replication event, then
it could fail to be copied.  In a system as big as fastmail.fm's,
this means almost every shutdown causes a couple of messages to 
fail to sync.  Then we bring up the replica, get two messages
with the same UID, hilarity ensues.

This patch adds a SIGQUIT handler to master, which sends SIGQUIT
to children then doesn't exit until all children have.  The
children already had a SIGQUIT handler which waited for 
signals_poll() to be checked.  The patch also adds a few more
signals_poll() in likely places.

Some documentation has been added on using this, though I feel it
could be made a bit more prominent since clean shutdown is much
safer for data integrity.  In particular, distribution maintainers
should be making their system init scripts use it.
Index: cyrus-imapd-2.3.12rc2/imap/Makefile.in
===================================================================
--- cyrus-imapd-2.3.12rc2.orig/imap/Makefile.in	2008-04-18 17:14:31.000000000 +1000
+++ cyrus-imapd-2.3.12rc2/imap/Makefile.in	2008-04-18 17:14:33.000000000 +1000
@@ -98,7 +98,7 @@
 
 LOBJS= append.o mailbox.o mboxlist.o mupdate-client.o mboxname.o message.o \
 	global.o imap_err.o mupdate_err.o proc.o setproctitle.o \
-	convert_code.o duplicate.o saslclient.o saslserver.o signals.o \
+	convert_code.o duplicate.o saslclient.o saslserver.o ../lib/signals.o \
 	annotate.o search_engines.o squat.o squat_internal.o mbdump.o \
 	imapparse.o telemetry.o user.o notify.o idle.o quota_db.o \
 	sync_log.o $(SEEN) mboxkey.o backend.o tls.o message_guid.o \
Index: cyrus-imapd-2.3.12rc2/imap/sync_client.c
===================================================================
--- cyrus-imapd-2.3.12rc2.orig/imap/sync_client.c	2008-04-18 17:14:28.000000000 +1000
+++ cyrus-imapd-2.3.12rc2/imap/sync_client.c	2008-04-18 17:14:33.000000000 +1000
@@ -88,6 +88,7 @@
 #include "backend.h"
 #include "xstrlcat.h"
 #include "xstrlcpy.h"
+#include "signals.h"
 
 /* signal to config.c */
 const int config_need_data = 0;  /* YYY */
@@ -3315,6 +3316,8 @@
     while (1) {
         single_start = time(NULL);
 
+        signals_poll();
+
 	/* Check for shutdown file */
         if (sync_shutdown_file && !stat(sync_shutdown_file, &sbuf)) {
             unlink(sync_shutdown_file);
Index: cyrus-imapd-2.3.12rc2/lib/Makefile.in
===================================================================
--- cyrus-imapd-2.3.12rc2.orig/lib/Makefile.in	2008-03-25 04:43:08.000000000 +1100
+++ cyrus-imapd-2.3.12rc2/lib/Makefile.in	2008-04-18 17:14:33.000000000 +1000
@@ -83,7 +83,7 @@
 	$(srcdir)/lock.h $(srcdir)/map.h $(srcdir)/mkgmtime.h \
 	$(srcdir)/nonblock.h $(srcdir)/parseaddr.h $(srcdir)/prot.h \
 	$(srcdir)/retry.h $(srcdir)/sysexits.h $(srcdir)/strhash.h \
-	$(srcdir)/lsort.h $(srcdir)/stristr.h \
+	$(srcdir)/lsort.h $(srcdir)/stristr.h $(srcdir)/signals.h \
 	$(srcdir)/util.h $(srcdir)/xstrlcpy.h $(srcdir)/xstrlcat.h \
 	$(srcdir)/xmalloc.h $(srcdir)/imapurl.h \
 	$(srcdir)/cyrusdb.h $(srcdir)/iptostring.h $(srcdir)/rfc822date.h \
@@ -92,7 +92,7 @@
 
 LIBCYR_OBJS = acl.o bsearch.o charset.o glob.o retry.o util.o \
 	libcyr_cfg.o mkgmtime.o prot.o parseaddr.o imclient.o imparse.o \
-	lsort.o stristr.o rfc822date.o cyrusdb.o strhash.o \
+	lsort.o stristr.o rfc822date.o signals.o cyrusdb.o strhash.o \
 	chartable.o imapurl.o nonblock_@WITH_NONBLOCK@.o lock_@WITH_LOCK@.o \
 	gmtoff_@WITH_GMTOFF@.o map_@WITH_MAP@.o $(ACL) $(AUTH) \
 	@LIBOBJS@ @CYRUSDB_OBJS@ @MD5OBJ@ \
@@ -102,9 +102,9 @@
 LIBCYRM_HDRS = $(srcdir)/hash.h $(srcdir)/mpool.h $(srcdir)/xmalloc.h \
 	$(srcdir)/xstrlcat.h $(srcdir)/xstrlcpy.h $(srcdir)/util.h \
 	$(srcdir)/strhash.h $(srcdir)/libconfig.h $(srcdir)/assert.h \
-	imapopts.h
+	imapopts.h signals.h
 LIBCYRM_OBJS = libconfig.o imapopts.o hash.o mpool.o xmalloc.o strhash.o \
-	xstrlcat.o xstrlcpy.o assert.o util.o @IPV6_OBJS@
+	xstrlcat.o xstrlcpy.o assert.o util.o signals.o @IPV6_OBJS@
 
 all: $(BUILTSOURCES) libcyrus_min.a libcyrus.a
 
Index: cyrus-imapd-2.3.12rc2/lib/prot.c
===================================================================
--- cyrus-imapd-2.3.12rc2.orig/lib/prot.c	2008-03-25 04:43:09.000000000 +1100
+++ cyrus-imapd-2.3.12rc2/lib/prot.c	2008-04-18 17:14:33.000000000 +1000
@@ -69,6 +69,7 @@
 #include "map.h"
 #include "nonblock.h"
 #include "prot.h"
+#include "signals.h"
 #include "util.h"
 #include "xmalloc.h"
 
@@ -438,11 +439,11 @@
 		r = select(s->fd + 1, &rfds, (fd_set *)0, (fd_set *)0,
 			   &timeout);
 		now = time(NULL);
-	    } while ((r == 0 || (r == -1 && errno == EINTR)) &&
+	    } while ((r == 0 || (r == -1 && errno == EINTR && !signals_poll())) &&
 		     (now < read_timeout));
 	    if ((r == 0) || 
                 /* ignore EINTR if we've timed out */
-                (r == -1 && errno == EINTR && now >= read_timeout)) {
+                (r == -1 && errno == EINTR && !signals_poll() && now >= read_timeout)) {
 		if (!s->dontblock) {
 		    s->error = xstrdup("idle for too long");
 		    return EOF;
@@ -472,7 +473,7 @@
 #else  /* HAVE_SSL */
 	    n = read(s->fd, s->buf, PROT_BUFSIZE);
 #endif /* HAVE_SSL */
-	} while (n == -1 && errno == EINTR);
+	} while (n == -1 && errno == EINTR && !signals_poll());
 		
 	if (n <= 0) {
 	    if (n) s->error = xstrdup(strerror(errno));
@@ -534,7 +535,7 @@
 		ptr = s->buf;
 		do {
 		    n = write(s->logfd, ptr, left);
-		    if (n == -1 && errno != EINTR) {
+		    if (n == -1 && (errno != EINTR || signals_poll())) {
 			break;
 		    }
 		    if (n > 0) {
@@ -574,7 +575,7 @@
 
 	do {
 	    n = write(s->logfd, ptr, left);
-	    if (n == -1 && errno != EINTR) {
+	    if (n == -1 && (errno != EINTR || signals_poll())) {
 		break;
 	    }
 	    if (n > 0) {
@@ -631,7 +632,7 @@
 #else  /* HAVE_SSL */
 	n = write(s->fd, buf, len);
 #endif /* HAVE_SSL */
-    } while (n == -1 && errno == EINTR);
+    } while (n == -1 && errno == EINTR && !signals_poll());
 
     return n;
 }
@@ -786,7 +787,7 @@
 
 	    do {
 		n = write(s->big_buffer, ptr, left);
-		if (n == -1 && errno != EINTR) {
+		if (n == -1 && (errno != EINTR || signals_poll())) {
 		    syslog(LOG_ERR, "write to protstream buffer failed: %s",
 			   strerror(errno));
 		    
Index: cyrus-imapd-2.3.12rc2/lib/signals.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ cyrus-imapd-2.3.12rc2/lib/signals.c	2008-04-18 17:14:33.000000000 +1000
@@ -0,0 +1,120 @@
+/* signals.c -- signal handling functions to allow clean shutdown
+ *
+ * Copyright (c) 1994-2008 Carnegie Mellon University.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The name "Carnegie Mellon University" must not be used to
+ *    endorse or promote products derived from this software without
+ *    prior written permission. For permission or any legal
+ *    details, please contact
+ *      Carnegie Mellon University
+ *      Center for Technology Transfer and Enterprise Creation
+ *      4615 Forbes Avenue
+ *      Suite 302
+ *      Pittsburgh, PA  15213
+ *      (412) 268-7393, fax: (412) 268-7395
+ *      innovation@andrew.cmu.edu
+ *
+ * 4. Redistributions of any form whatsoever must retain the following
+ *    acknowledgment:
+ *    "This product includes software developed by Computing Services
+ *     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
+ *
+ * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
+ * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
+ * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
+ * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
+ * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
+ * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * $Id: signals.c,v 1.15 2008/03/24 17:09:19 murch Exp $
+ */
+
+#include <config.h>
+
+#include <stdlib.h>
+#include <signal.h>
+#include <syslog.h>
+
+#include "signals.h"
+#include "xmalloc.h"
+#include "exitcodes.h"
+
+static int gotsignal = 0;
+
+static void sighandler(int sig)
+{
+    /* syslog(LOG_DEBUG, "got signal %d", sig); */
+    gotsignal = sig;
+}
+
+static const int catch[] = { SIGHUP, SIGINT, 0 };
+
+void signals_add_handlers(int alarm)
+{
+    struct sigaction action;
+    int i;
+    
+    sigemptyset(&action.sa_mask);
+
+    action.sa_flags = 0;
+#ifdef SA_RESETHAND
+    action.sa_flags |= SA_RESETHAND;
+#endif
+
+    action.sa_handler = sighandler;
+
+    /* SIGALRM used as a syscall timeout, so we don't set SA_RESTART */
+    if (alarm && sigaction(SIGALRM, &action, NULL) < 0) {
+	fatal("unable to install signal handler for %d: %m", SIGALRM);
+    }
+
+    /* no restartable SIGQUIT thanks */
+    if (sigaction(SIGQUIT, &action, NULL) < 0) {
+	fatal("unable to install signal handler for %d: %m", SIGQUIT);
+    }
+
+#ifdef SA_RESTART
+    action.sa_flags |= SA_RESTART;
+#endif
+    
+    for (i = 0; catch[i] != 0; i++) {
+	if (catch[i] != SIGALRM && sigaction(catch[i], &action, NULL) < 0) {
+	    fatal("unable to install signal handler for %d: %m", catch[i]);
+	}
+    }
+}
+
+static shutdownfn *shutdown_cb = NULL;
+
+void signals_set_shutdown(shutdownfn *s)
+{
+    shutdown_cb = s;
+}
+
+int signals_poll(void)
+{
+    switch (gotsignal) {
+    case SIGINT:
+    case SIGQUIT:
+	if (shutdown_cb) shutdown_cb(EC_TEMPFAIL);
+	else exit(EC_TEMPFAIL);
+	break;
+    default:
+	return gotsignal;
+	break;
+    }
+    return 0; /* compiler warning stupidity */
+}
Index: cyrus-imapd-2.3.12rc2/lib/signals.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ cyrus-imapd-2.3.12rc2/lib/signals.h	2008-04-18 17:14:33.000000000 +1000
@@ -0,0 +1,54 @@
+/* signals.h -- signal handling functions to allow clean shutdown
+ *
+ * Copyright (c) 1994-2008 Carnegie Mellon University.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The name "Carnegie Mellon University" must not be used to
+ *    endorse or promote products derived from this software without
+ *    prior written permission. For permission or any legal
+ *    details, please contact
+ *      Carnegie Mellon University
+ *      Center for Technology Transfer and Enterprise Creation
+ *      4615 Forbes Avenue
+ *      Suite 302
+ *      Pittsburgh, PA  15213
+ *      (412) 268-7393, fax: (412) 268-7395
+ *      innovation@andrew.cmu.edu
+ *
+ * 4. Redistributions of any form whatsoever must retain the following
+ *    acknowledgment:
+ *    "This product includes software developed by Computing Services
+ *     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
+ *
+ * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
+ * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
+ * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
+ * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
+ * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
+ * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * $Id: signals.h,v 1.3 2008/03/24 17:09:19 murch Exp $
+ */
+
+#ifndef INCLUDED_SIGNALS_H
+#define INCLUDED_SIGNALS_H
+
+typedef void shutdownfn(int);
+
+void signals_add_handlers(int alarm);
+void signals_set_shutdown(shutdownfn *s);
+int signals_poll(void);
+
+#endif /* INCLUDED_SIGNALS_H */
Index: cyrus-imapd-2.3.12rc2/master/master.c
===================================================================
--- cyrus-imapd-2.3.12rc2.orig/master/master.c	2008-04-16 04:11:52.000000000 +1000
+++ cyrus-imapd-2.3.12rc2/master/master.c	2008-04-18 17:14:33.000000000 +1000
@@ -127,6 +127,8 @@
 static int listen_queue_backlog = 32;
 static int pidfd = -1;
 
+static volatile int in_shutdown = 0;
+
 const char *MASTER_CONFIG_FILENAME = DEFAULT_MASTER_CONFIG_FILENAME;
 
 #define SERVICE_NONE -1
@@ -836,8 +838,8 @@
 		case SERVICE_STATE_READY:
 		    s->nactive--;
 		    s->ready_workers--;
-		    if (WIFSIGNALED(status) ||
-			(WIFEXITED(status) && WEXITSTATUS(status))) {
+		    if (!in_shutdown && (WIFSIGNALED(status) ||
+			(WIFEXITED(status) && WEXITSTATUS(status)))) {
 			syslog(LOG_WARNING, 
 			       "service %s pid %d in READY state: terminated abnormally",
 			       SERVICENAME(s->name), pid);
@@ -853,8 +855,8 @@
 		    
 		case SERVICE_STATE_BUSY:
 		    s->nactive--;
-		    if (WIFSIGNALED(status) ||
-			(WIFEXITED(status) && WEXITSTATUS(status))) {
+		    if (!in_shutdown && (WIFSIGNALED(status) ||
+			(WIFEXITED(status) && WEXITSTATUS(status)))) {
 			syslog(LOG_DEBUG,
 			       "service %s pid %d in BUSY state: terminated abnormally",
 			       SERVICENAME(s->name), pid);
@@ -965,6 +967,31 @@
     }
 }
 
+/* Allow a clean shutdown on SIGQUIT */
+void sigquit_handler(int sig __attribute__((unused)))
+{
+    struct sigaction action;
+
+    /* Ignore SIGQUIT ourselves */
+    sigemptyset(&action.sa_mask);
+    action.sa_flags = 0;
+    action.sa_handler = SIG_IGN;
+    if (sigaction(SIGQUIT, &action, (struct sigaction *) 0) < 0) {
+	syslog(LOG_ERR, "sigaction: %m");
+    }
+
+    /* send our process group a SIGQUIT */
+    if (kill(0, SIGQUIT) < 0) {
+	syslog(LOG_ERR, "sigquit_handler: kill(0, SIGQUIT): %m");
+    }
+
+    /* Set a flag so main loop knows to shut down when 
+       all children have exited */
+    in_shutdown = 1;
+
+    syslog(LOG_INFO, "attempting clean shutdown on SIGQUIT");
+}
+
 static volatile int gotsigchld = 0;
 
 void sigchld_handler(int sig __attribute__((unused)))
@@ -1030,6 +1057,12 @@
 	fatal("unable to install signal handler for SIGALRM: %m", 1);
     }
 
+    /* Allow a clean shutdown on SIGQUIT */
+    action.sa_handler = sigquit_handler;
+    if (sigaction(SIGQUIT, &action, NULL) < 0) {
+	fatal("unable to install signal handler for SIGQUIT: %m", 1);
+    }
+
     /* Handle SIGTERM and SIGINT the same way -- kill
      * off our children! */
     action.sa_handler = sigterm_handler;
@@ -1911,7 +1944,7 @@
 
     now = time(NULL);
     for (;;) {
-	int r, i, maxfd;
+	int r, i, maxfd, total_children = 0;
 	struct timeval tv, *tvptr;
 	struct notify_message msg;
 #if defined(HAVE_UCDSNMP) || defined(HAVE_NETSNMP)
@@ -1919,7 +1952,8 @@
 #endif
 
 	/* run any scheduled processes */
-	spawn_schedule(now);
+	if (!in_shutdown)
+	    spawn_schedule(now);
 
 	/* reap first, that way if we need to babysit we will */
 	if (gotsigchld) {
@@ -1930,41 +1964,49 @@
 	
 	/* do we have any services undermanned? */
 	for (i = 0; i < nservices; i++) {
-	    if (Services[i].exec /* enabled */ &&
-		(Services[i].nactive < Services[i].max_workers) &&
-		(Services[i].ready_workers < Services[i].desired_workers)) {
-		spawn_service(i);
-	    } else if (Services[i].exec
-		       && Services[i].babysit
-		       && Services[i].nactive == 0) {
-		syslog(LOG_ERR,
-		       "lost all children for service: %s.  " \
-		       "Applying babysitter.",
-		       Services[i].name);
-		spawn_service(i);
-	    } else if (!Services[i].exec /* disabled */ &&
-		       Services[i].name /* not yet removed */ &&
-		       Services[i].nactive == 0) {
-		if (verbose > 2)
-		    syslog(LOG_DEBUG, "remove: service %s pipe %d %d",
-			   Services[i].name,
-			   Services[i].stat[0], Services[i].stat[1]);
-
-		/* Only free the service info on the primary */
-		if (Services[i].associate == 0) {
-		    free(Services[i].name);
+	    total_children += Services[i].nactive;
+	    if (!in_shutdown) {
+		if (Services[i].exec /* enabled */ &&
+		    (Services[i].nactive < Services[i].max_workers) &&
+		    (Services[i].ready_workers < Services[i].desired_workers)) {
+		    spawn_service(i);
+		} else if (Services[i].exec
+			  && Services[i].babysit
+			  && Services[i].nactive == 0) {
+		    syslog(LOG_ERR,
+			  "lost all children for service: %s.  " \
+			  "Applying babysitter.",
+			  Services[i].name);
+		    spawn_service(i);
+		} else if (!Services[i].exec /* disabled */ &&
+			  Services[i].name /* not yet removed */ &&
+			  Services[i].nactive == 0) {
+		    if (verbose > 2)
+			syslog(LOG_DEBUG, "remove: service %s pipe %d %d",
+			      Services[i].name,
+			      Services[i].stat[0], Services[i].stat[1]);
+    
+		    /* Only free the service info on the primary */
+		    if (Services[i].associate == 0) {
+			free(Services[i].name);
+		    }
+		    Services[i].name = NULL;
+		    Services[i].nforks = 0;
+		    Services[i].nactive = 0;
+		    Services[i].nconnections = 0;
+		    Services[i].associate = 0;
+    
+		    if (Services[i].stat[0] > 0) close(Services[i].stat[0]);
+		    if (Services[i].stat[1] > 0) close(Services[i].stat[1]);
+		    memset(Services[i].stat, 0, sizeof(Services[i].stat));
 		}
-		Services[i].name = NULL;
-		Services[i].nforks = 0;
-		Services[i].nactive = 0;
-		Services[i].nconnections = 0;
-		Services[i].associate = 0;
-
-		if (Services[i].stat[0] > 0) close(Services[i].stat[0]);
-		if (Services[i].stat[1] > 0) close(Services[i].stat[1]);
-		memset(Services[i].stat, 0, sizeof(Services[i].stat));
 	    }
 	}
+        
+	if (in_shutdown && total_children == 0) {
+	   syslog(LOG_NOTICE, "All children have exited, closing down");
+	   exit(0);
+	}
 
 	if (gotsighup) {
 	    syslog(LOG_NOTICE, "got SIGHUP");
@@ -2049,7 +2091,7 @@
 		process_msg(i, &msg);
 	    }
 
-	    if (Services[i].exec &&
+	    if (!in_shutdown && Services[i].exec &&
 		Services[i].nactive < Services[i].max_workers) {
 		/* bring us up to desired_workers */
 		for (j = Services[i].ready_workers;
Index: cyrus-imapd-2.3.12rc2/master/service-thread.c
===================================================================
--- cyrus-imapd-2.3.12rc2.orig/master/service-thread.c	2008-03-25 04:47:41.000000000 +1100
+++ cyrus-imapd-2.3.12rc2/master/service-thread.c	2008-04-18 17:14:33.000000000 +1000
@@ -70,6 +70,7 @@
 #include "service.h"
 #include "libconfig.h"
 #include "xmalloc.h"
+#include "signals.h"
 
 extern int optind;
 extern char *optarg;
@@ -265,6 +266,8 @@
 	    fd = accept(LISTEN_FD, NULL, NULL);
 	    if (fd < 0) {
 		switch (errno) {
+		case EINTR:
+        signals_poll();
 		case ENETDOWN:
 #ifdef EPROTO
 		case EPROTO:
@@ -278,7 +281,6 @@
 		case EOPNOTSUPP:
 		case ENETUNREACH:
 		case EAGAIN:
-		case EINTR:
 		case ECONNABORTED:
 		    break;
 		default:
Index: cyrus-imapd-2.3.12rc2/master/service.c
===================================================================
--- cyrus-imapd-2.3.12rc2.orig/master/service.c	2008-03-25 04:47:41.000000000 +1100
+++ cyrus-imapd-2.3.12rc2/master/service.c	2008-04-18 17:14:33.000000000 +1000
@@ -223,7 +223,7 @@
     if (lockfd != -1) {
 	alockinfo.l_type = F_UNLCK;
 	while ((rc = fcntl(lockfd, F_SETLKW, &alockinfo)) < 0 && 
-	       errno == EINTR)
+	       errno == EINTR && !signals_poll())
 	    /* noop */;
 
 	if (rc < 0) {
@@ -436,6 +436,8 @@
 		fd = accept(LISTEN_FD, NULL, NULL);
 		if (fd < 0) {
 		    switch (errno) {
+		    case EINTR:
+            signals_poll();
 		    case ENETDOWN:
 #ifdef EPROTO
 		    case EPROTO:
@@ -449,7 +451,6 @@
 		    case EOPNOTSUPP:
 		    case ENETUNREACH:
 		    case EAGAIN:
-		    case EINTR:
 			break;
 
 		    case EINVAL:
Index: cyrus-imapd-2.3.12rc2/doc/install-configure.html
===================================================================
--- cyrus-imapd-2.3.12rc2.orig/doc/install-configure.html	2008-01-08 04:56:09.000000000 +1100
+++ cyrus-imapd-2.3.12rc2/doc/install-configure.html	2008-04-18 17:14:33.000000000 +1000
@@ -242,6 +242,42 @@
 <p><li>Monitor the progress of the master process by examining the
 <tt>imapd.log</tt> file.  It should never exit by itself, but you can
 shut down the mail system by sending it a signal with <tt>kill</tt>.
+
+<p><li><b>Clean Shutdown</b> - you can shut the master process down
+cleanly by sending it a SIGQUIT rather than SIGTERM signal.  This
+will cause the master process to send SIGQUIT to all its children and
+then wait for them to finish cleanly.  This avoids issues like a
+message being appended by lmtpd but the sync_log record never being
+written.
+
+<p>Since a clean shutdown may never finish if a child process is stuck
+for some reason the recommended approach is to send a SIGQUIT then loop
+on the master process sending a signal 0 every second until either the
+master process has gone away or a suitable time has expired (maybe 10
+seconds).  You can then send a SIGTERM if the process still exists.
+
+<p>At FastMail the following snippet of perl is used (warning: Linux
+specific signal numbers - check your own system before using this):
+
+<pre>
+    my $pid = `cat $PIDFILE`;
+    chomp($pid);
+    print "Trying nice shutdown - killing $pid with SIGQUIT\n";
+    kill 3, $pid;
+    foreach my $num (1..10) {
+      if (kill 0, $pid) {
+        print "Not dead yet after $num seconds\n";
+        sleep 1;
+      }
+      else {
+        last;
+      }
+    }
+    if (kill 0, $pid) {
+      print "No more Mr. Nice Guy - killing $pid with SIGTERM\n";
+      kill 15, $pid;
+    }
+</pre>
 </ol>
 
 <a name="mta"><h3>Configuring the Mail Transfer Agent</h3></a>
