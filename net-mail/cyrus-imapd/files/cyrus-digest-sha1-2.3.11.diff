GUID IMAP COMMANDS

This patch factors out stuff we used to have in the old MD5UUIDs
patch, the following FETCH responses in imapd:

FETCH DIGEST.SHA1 => 40 character hex string (message sha1)
FETCH RFC822.SHA1 => 40 character hex string (message sha1, calculated)
FETCH RFC822.FILESIZE => size of actual file on disk (via stat or mmap)

It also adds a capability string item: "DIGEST=SHA1"

Totally non-standard of course, but way useful for our replication checking
scripts.  Embrace and extend 'r' us.

Anyone feel like writing an RFC for fetching the digest of a message via
IMAP?  If the server calculated it on delivery and cached it then you'd have
a great way to clean up after a UIDVALIDITY change or other destabilising event
without having to fetch every message again.

(that would be me - I'm going to RFC the "DIGEST.SHA1" bit)
Index: cyrus-imapd-2.3.12rc2/imap/imapd.h
===================================================================
--- cyrus-imapd-2.3.12rc2.orig/imap/imapd.h	2008-03-25 04:09:17.000000000 +1100
+++ cyrus-imapd-2.3.12rc2/imap/imapd.h	2008-04-18 17:14:58.000000000 +1000
@@ -110,7 +110,10 @@
     FETCH_SETSEEN =             (1<<10),
 /*     FETCH_UNCACHEDHEADER =      (1<<11) -- obsolete */
     FETCH_IS_PARTIAL =          (1<<12), /* this is the PARTIAL command */
-    FETCH_MODSEQ =		(1<<13)
+    FETCH_MODSEQ =		(1<<13),
+    FETCH_GUID   =    (1<<14),
+    FETCH_SHA1   =    (1<<15),
+    FETCH_FILESIZE =  (1<<16)
 };
 
 enum {
Index: cyrus-imapd-2.3.12rc2/imap/index.c
===================================================================
--- cyrus-imapd-2.3.12rc2.orig/imap/index.c	2008-04-18 17:13:08.000000000 +1000
+++ cyrus-imapd-2.3.12rc2/imap/index.c	2008-04-18 17:14:58.000000000 +1000
@@ -2456,7 +2456,7 @@
     }
 
     /* Open the message file if we're going to need it */
-    if ((fetchitems & (FETCH_HEADER|FETCH_TEXT|FETCH_RFC822)) ||
+    if ((fetchitems & (FETCH_HEADER|FETCH_TEXT|FETCH_SHA1|FETCH_RFC822)) ||
 	fetchargs->cache_atleast > CACHE_VERSION(msgno) ||
 	fetchargs->binsections || fetchargs->sizesections ||
 	fetchargs->bodysections) {
@@ -2493,6 +2493,11 @@
 	prot_printf(imapd_out, "%cUID %u", sepchar, UID(msgno));
 	sepchar = ' ';
     }
+    if (fetchitems & FETCH_GUID) {
+	prot_printf(imapd_out, "%cDIGEST.SHA1 %s", sepchar, message_guid_encode(GUID(msgno)));
+	sepchar = ' ';
+    }
+
     if (fetchitems & FETCH_INTERNALDATE) {
 	time_t msgdate = INTERNALDATE(msgno);
 	char datebuf[30];
@@ -2512,6 +2517,33 @@
 	prot_printf(imapd_out, "%cRFC822.SIZE %u", sepchar, SIZE(msgno));
 	sepchar = ' ';
     }
+    if (fetchitems & FETCH_FILESIZE) {
+	if (msg_base)
+	    prot_printf(imapd_out, "%cRFC822.FILESIZE %u", sepchar, msg_size);
+	else {
+	    char fname[MAX_MAILBOX_PATH+1];
+	    struct stat sbuf;
+	    /* Find the size of the message file */
+	    strlcpy(fname, mailbox->path, sizeof(fname));
+	    strlcat(fname, "/", sizeof(fname));
+	    mailbox_message_get_fname(mailbox, UID(msgno),
+	                             fname + strlen(fname),
+				     sizeof(fname) - strlen(fname));
+	    if (stat(fname, &sbuf) == -1) {
+		syslog(LOG_ERR, "IOERROR: stat on %s: %m", fname);
+		prot_printf(imapd_out, "%cRFC822.FILESIZE NIL", sepchar);
+	    }
+	    else
+		prot_printf(imapd_out, "%cRFC822.FILESIZE %u", sepchar, sbuf.st_size);
+	}
+	sepchar = ' ';
+    }
+    if (fetchitems & FETCH_SHA1) {
+	struct message_guid tmpguid;
+	message_guid_generate(&tmpguid, msg_base, msg_size);
+	prot_printf(imapd_out, "%cRFC822.SHA1 %s", sepchar, message_guid_encode(&tmpguid));
+	sepchar = ' ';
+    }
     if (fetchitems & FETCH_ENVELOPE) {
 	prot_printf(imapd_out, "%cENVELOPE ", sepchar);
 	sepchar = ' ';
Index: cyrus-imapd-2.3.12rc2/imap/imapd.c
===================================================================
--- cyrus-imapd-2.3.12rc2.orig/imap/imapd.c	2008-04-18 17:14:44.000000000 +1000
+++ cyrus-imapd-2.3.12rc2/imap/imapd.c	2008-04-18 17:14:58.000000000 +1000
@@ -3902,6 +3902,13 @@
 	    else goto badatt;
 	    break;
 
+	case 'D':
+	    if (!strcmp(fetchatt.s, "DIGEST.SHA1")) {
+		fetchitems |= FETCH_GUID;
+	    }
+	    else goto badatt;
+	    break;
+
 	case 'E':
 	    if (!strcmp(fetchatt.s, "ENVELOPE")) {
 		fetchitems |= FETCH_ENVELOPE;
@@ -3936,6 +3943,7 @@
 	    }
 	    else goto badatt;
 	    break;
+
 	case 'R':
 	    if (!strcmp(fetchatt.s, "RFC822")) {
 		fetchitems |= FETCH_RFC822|FETCH_SETSEEN;
@@ -3952,6 +3960,12 @@
 	    else if (!strcmp(fetchatt.s, "RFC822.TEXT")) {
 		fetchitems |= FETCH_TEXT|FETCH_SETSEEN;
 	    }
+	    else if (!strcmp(fetchatt.s, "RFC822.SHA1")) {
+		fetchitems |= FETCH_SHA1;
+	    }
+	    else if (!strcmp(fetchatt.s, "RFC822.FILESIZE")) {
+		fetchitems |= FETCH_FILESIZE;
+	    }
 	    else if (!strcmp(fetchatt.s, "RFC822.TEXT.PEEK")) {
 		fetchitems |= FETCH_TEXT;
 	    }
Index: cyrus-imapd-2.3.12rc2/imap/version.h
===================================================================
--- cyrus-imapd-2.3.12rc2.orig/imap/version.h	2008-04-16 04:18:34.000000000 +1000
+++ cyrus-imapd-2.3.12rc2/imap/version.h	2008-04-18 17:14:58.000000000 +1000
@@ -69,7 +69,7 @@
 	"NO_ATOMIC_RENAME UNSELECT " \
 	"CHILDREN MULTIAPPEND BINARY " \
 	"SORT SORT=MODSEQ THREAD=ORDEREDSUBJECT THREAD=REFERENCES " \
-	"ANNOTATEMORE CATENATE CONDSTORE SCAN"
+	"ANNOTATEMORE CATENATE CONDSTORE SCAN DIGEST=SHA1"
 
 
 /* Values for ID processing */
