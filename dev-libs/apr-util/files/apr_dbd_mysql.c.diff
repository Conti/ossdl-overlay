--- apr_dbd_mysql.c.orig	2006-01-31 15:30:22.000000000 +1100
+++ apr_dbd_mysql.c	2006-02-24 13:32:46.000000000 +1100
@@ -41,6 +41,16 @@
  *      that's gone into developing this work.
  */
 
+/*      Changes to handling of prepared statements: Alex Dubov <oakad@yahoo.com> 2006-02-23
+ *
+ *      1. Make dbd_mysql_prepare accept type specifiers (see below)
+ *      2. Parameters bind array is now part of the apr_dbd_prepared_t
+ *      3. Return types are honored (no automatic conversion to strings)
+ *      4. struct blob_t* is returned for blobs (types handled by fetch_result_bin)
+ *        - other string types are handled by fetch_result_str, which always adds terminating \0
+ *      5. Removed mysql_stmt_close call-back registration - mysql_close removes all statements
+ *        - I had this problem with stand-alone apr app (glibc double free exception)
+ */
 
 #include "apu.h"
 
@@ -50,7 +60,6 @@
 #include <stdlib.h>
 
 #include <mysql/mysql.h>
-#include <mysql/errmsg.h>
 
 #include "apr_strings.h"
 
@@ -59,6 +68,7 @@
 
 struct apr_dbd_prepared_t {
     MYSQL_STMT* stmt;
+    MYSQL_BIND* bind;
 };
 
 struct apr_dbd_transaction_t {
@@ -82,6 +92,11 @@
     apr_dbd_results_t *res;
 };
 
+struct blob_t {
+    int len;
+    char data[];
+};
+
 static int dbd_mysql_select(apr_pool_t *pool, apr_dbd_t *sql,
                             apr_dbd_results_t **results,
                             const char *query, int seek)
@@ -194,7 +209,16 @@
             return NULL;
         }
         else {
-            return bind->buffer;
+            if(bind->buffer_type == MYSQL_TYPE_TINY_BLOB 
+               || bind->buffer_type == MYSQL_TYPE_MEDIUM_BLOB
+               || bind->buffer_type == MYSQL_TYPE_LONG_BLOB
+               || bind->buffer_type == MYSQL_TYPE_BLOB
+               || bind->buffer_type == MYSQL_TYPE_BIT) {
+               /* Use optional length field - bind->length points to the real data size */
+               ((struct blob_t*)(bind->buffer - sizeof(struct blob_t)))->len = *(bind->length);
+               return bind->buffer - sizeof(struct blob_t);
+            }
+            else return bind->buffer;
         }
     }
     else {
@@ -228,6 +252,7 @@
     mysql_real_escape_string(sql->conn, ret, arg, len);
     return ret;
 }
+
 static int dbd_mysql_prepare(apr_pool_t *pool, apr_dbd_t *sql,
                              const char *query, const char *label,
                              apr_dbd_prepared_t **statement)
@@ -235,61 +260,219 @@
     /* Translate from apr_dbd to native query format */
     char *myquery = apr_pstrdup(pool, query);
     char *p = myquery;
-    const char *q;
-    for (q = query; *q; ++q) {
-        if (q[0] == '%') {
-            if (isalpha(q[1])) {
-                *p++ = '?';
-                ++q;
-            }
-            else if (q[1] == '%') {
-                /* reduce %% to % */
+    const char *q = query;
+
+    const int bind_inc = 8;
+
+    int cnt, p_len = 0, nargs, ret = 0, bind_size = bind_inc, bind_pos = 0;
+
+    if (!*statement) {
+        *statement = apr_palloc(pool, sizeof(apr_dbd_prepared_t));
+    }
+
+    if(!((*statement)->bind = apr_pcalloc(pool, bind_size * sizeof(MYSQL_BIND)))) return 1;
+
+    /* Recognize following formats:
+     *    Format        | MySQL C type           | SQL type              | C type
+     * -----------------|------------------------|-----------------------|--------------
+     *    %hhd(u)       | MYSQL_TYPE_TINY        | TINYINT               | char
+     *    %hd(u)        | MYSQL_TYPE_SHORT       | SMALLINT              | short int
+     *    %ld(u), %d(u) | MYSQL_TYPE_LONG        | INT                   | int
+     *    %lld(u)       | MYSQL_TYPE_LONGLONG    | BIGINT                | long long int
+     *    %f            | MYSQL_TYPE_FLOAT       | FLOAT                 | float
+     *    %lf           | MYSQL_TYPE_DOUBLE      | DOUBLE                | double
+     *    %c            | MYSQL_TYPE_STRING      | CHAR/BINARY           | char*
+     *    %s            | MYSQL_TYPE_BLOB        | BLOB/TEXT             | struct blob_t*
+     * These are not supported currently:
+     *                  | MYSQL_TYPE_BIT
+     *                  | MYSQL_TYPE_TIME        | TIME                  | MYSQL_TIME
+     *                  | MYSQL_TYPE_DATE        | DATE                  | MYSQL_TIME
+     *                  | MYSQL_TYPE_DATETIME    | DATETIME              | MYSQL_TIME
+     *                  | MYSQL_TYPE_TIMESTAMP   | TIMESTAMP             | MYSQL_TIME
+     * These should work ok with MYSQL_TYPE_BLOB:
+     *                  | MYSQL_TYPE_VAR_STRING  | VARCHAR/VARBINARY     |
+     *                  | MYSQL_TYPE_TINY_BLOB   | TINYBLOB/TINYTEXT     |
+     *                  | MYSQL_TYPE_MEDIUM_BLOB | MEDIUMBLOB/MEDIUMTEXT |
+     *                  | MYSQL_TYPE_LONG_BLOB   | LONGBLOB/LONGTEXT     |
+     */
+    while(*q) {
+        if(q[0] != '%') {
+            *p++ = *q++;
+        }
+        else {
+	    q++;
+            if(q[0] == '%') {
                 *p++ = *q++;
             }
             else {
-                *p++ = *q;
+                if(q[0] == 'h') {
+                    if(q[1] == 'h') {
+                        p_len = 1;
+                        q += 2;
+                    }
+                    else {
+                        p_len = 2;
+                        q++;
+                    }
+                }
+                else if(q[0] == 'l') {
+                    if(q[1] == 'l') {
+                        p_len = 8;
+                        q += 2;
+                    }
+                    else {
+                        p_len = 4;
+                        q++;
+                    }
+                }
+
+                switch(q[0]) {
+                    case 'c':
+                        (*statement)->bind[bind_pos].buffer_type = MYSQL_TYPE_STRING;
+                        (*statement)->bind[bind_pos].is_unsigned = 0;
+                        break;
+                    case 'd':
+                        if(!p_len) p_len = 4;
+                        (*statement)->bind[bind_pos].buffer_type = 
+                            (p_len == 8) ? MYSQL_TYPE_LONGLONG : ((p_len == 4) ? MYSQL_TYPE_LONG
+                                : ((p_len == 2) ? MYSQL_TYPE_SHORT : ((p_len == 1) ? MYSQL_TYPE_TINY 
+                                    : MYSQL_TYPE_NULL)));
+                        (*statement)->bind[bind_pos].is_unsigned = 0;
+                        break;
+                    case 'f':
+                        (*statement)->bind[bind_pos].buffer_type = 
+                            (p_len == 4) ? MYSQL_TYPE_DOUBLE : ((p_len == 0) ? MYSQL_TYPE_FLOAT : MYSQL_TYPE_NULL);
+                        (*statement)->bind[bind_pos].is_unsigned = 0;
+                        break;
+                    case 's':
+                        (*statement)->bind[bind_pos].buffer_type = MYSQL_TYPE_BLOB;
+                        (*statement)->bind[bind_pos].is_unsigned = 0;
+                        break;
+                    case 'u':
+                        if(!p_len) p_len = 4;
+                        (*statement)->bind[bind_pos].buffer_type = 
+                            (p_len == 8) ? MYSQL_TYPE_LONGLONG : ((p_len == 4) ? MYSQL_TYPE_LONG
+                                : ((p_len == 2) ? MYSQL_TYPE_SHORT : ((p_len == 1) ? MYSQL_TYPE_TINY 
+                                    : MYSQL_TYPE_NULL)));
+                        (*statement)->bind[bind_pos].is_unsigned = 1;
+                        break;
+                    default:
+                        *p++ = *q++;
+                        p_len = 0;
+                        continue;
+                }
+                p_len = 0;
+                bind_pos++;
+                if(bind_pos == bind_size) {
+                    // it will be nice to have realloc here
+                    MYSQL_BIND* old_bind = (*statement)->bind;
+                    if(!((*statement)->bind = apr_pcalloc(pool, (bind_size + bind_inc) * sizeof(MYSQL_BIND)))) 
+                        return 1;
+
+                    memcpy((*statement)->bind, old_bind, bind_size * sizeof(MYSQL_BIND));
+                    bind_size += bind_inc;
+                }
+                *p++ = '?'; q++;
             }
         }
-        else {
-            *p++ = *q;
-        }
-    } 
-    *p = 0;
-    if (!*statement) {
-        *statement = apr_palloc(pool, sizeof(apr_dbd_prepared_t));
     }
+
+    *p = 0;
+
     (*statement)->stmt = mysql_stmt_init(sql->conn);
-    apr_pool_cleanup_register(pool, *statement, (void*)mysql_stmt_close,
-                              apr_pool_cleanup_null);
-    return mysql_stmt_prepare((*statement)->stmt, myquery, strlen(myquery));
+
+    if(!(*statement)->stmt) ret = 1;
+    else {
+        /* apr_pool_cleanup_register(pool, *statement, (void*)mysql_stmt_close,
+                                  apr_pool_cleanup_null); */
+        ret = mysql_stmt_prepare((*statement)->stmt, myquery, strlen(myquery));
+        if(!ret) {
+            nargs = mysql_stmt_param_count((*statement)->stmt);
+
+            if(nargs != bind_pos) ret = 2; // SQL string probably has '?' characters we know nothing aboud
+        }
+    }
+
+    return ret;
+}
+
+static void bind_arg(MYSQL_BIND *bind, char *arg, my_bool* null_v)
+{
+    switch(bind->buffer_type) {
+        case MYSQL_TYPE_TINY:
+            bind->buffer = arg;
+            bind->buffer_length = 1;
+            break;
+        case MYSQL_TYPE_SHORT:
+            bind->buffer = arg;
+            bind->buffer_length = 2;
+            break;
+        case MYSQL_TYPE_LONG:
+            bind->buffer = arg;
+            bind->buffer_length = 4;
+            break;
+        case MYSQL_TYPE_LONGLONG:
+            bind->buffer = arg;
+            bind->buffer_length = 8;
+            break;
+        case MYSQL_TYPE_FLOAT:
+            bind->buffer = arg;
+            bind->buffer_length = 4;
+            break;
+        case MYSQL_TYPE_DOUBLE:
+            bind->buffer = arg;
+            bind->buffer_length = 8;
+            break;
+        case MYSQL_TYPE_STRING:
+            bind->buffer = arg;
+            bind->buffer_length = strlen(arg);
+            break;
+        case MYSQL_TYPE_BLOB:
+            bind->buffer = ((struct blob_t*)arg)->data;
+            bind->buffer_length = ((struct blob_t*)arg)->len;
+            break;
+        default:
+            bind->buffer_type = MYSQL_TYPE_NULL;
+            bind->buffer = 0;
+            bind->buffer_length = 0;
+            bind->length = 0;
+            bind->is_null = &null_v[1];
+        }
+
+        if(bind->buffer_type != MYSQL_TYPE_NULL) {
+
+            bind->length = &(bind->buffer_length);
+            bind->is_null = &null_v[0];
+        }
 }
 static int dbd_mysql_pquery(apr_pool_t *pool, apr_dbd_t *sql,
                             int *nrows, apr_dbd_prepared_t *statement,
                             int nargs, const char **values)
 {
-    MYSQL_BIND *bind;
     char *arg;
     int ret;
     int i;
-    my_bool is_null = FALSE;
+    int nqargs;
+    my_bool null_v[] = {FALSE, TRUE};
 
     if (sql->trans && sql->trans->errnum) {
         return sql->trans->errnum;
     }
-    nargs = mysql_stmt_param_count(statement->stmt);
 
-    bind = apr_palloc(pool, nargs*sizeof(MYSQL_BIND));
-    for (i=0; i < nargs; ++i) {
-        arg = (char*)values[i];
-        bind[i].buffer_type = MYSQL_TYPE_VAR_STRING;
-        bind[i].buffer = arg;
-        bind[i].buffer_length = strlen(arg);
-        bind[i].length = &bind[i].buffer_length;
-        bind[i].is_null = &is_null;
-        bind[i].is_unsigned = 0;
+    nqargs = mysql_stmt_param_count(statement->stmt);
+
+    for (i=0; i < nqargs; ++i) {
+	if(i < nargs) {
+            arg = (char*)values[i];
+        }
+        else {
+            statement->bind[i].buffer_type = MYSQL_TYPE_NULL;
+            arg = 0;
+        }
+        bind_arg(&statement->bind[i], arg, null_v);
     }
 
-    ret = mysql_stmt_bind_param(statement->stmt, bind);
+    ret = mysql_stmt_bind_param(statement->stmt, statement->bind);
     if (ret != 0) {
         *nrows = 0;
     }
@@ -305,30 +488,25 @@
 static int dbd_mysql_pvquery(apr_pool_t *pool, apr_dbd_t *sql, int *nrows,
                              apr_dbd_prepared_t *statement, va_list args)
 {
-    MYSQL_BIND *bind;
     char *arg;
     int ret;
     int nargs = 0;
     int i;
-    my_bool is_null = FALSE;
+    my_bool null_v[] = {FALSE, TRUE};
 
     if (sql->trans && sql->trans->errnum) {
         return sql->trans->errnum;
     }
     nargs = mysql_stmt_param_count(statement->stmt);
 
-    bind = apr_palloc(pool, nargs*sizeof(MYSQL_BIND));
     for (i=0; i < nargs; ++i) {
-        arg = va_arg(args, char*);
-        bind[i].buffer_type = MYSQL_TYPE_VAR_STRING;
-        bind[i].buffer = arg;
-        bind[i].buffer_length = strlen(arg);
-        bind[i].length = &bind[i].buffer_length;
-        bind[i].is_null = &is_null;
-        bind[i].is_unsigned = 0;
+        if(!(arg = va_arg(args, char*))) 
+            statement->bind[i].buffer_type = MYSQL_TYPE_NULL;
+
+        bind_arg(&statement->bind[i], arg, null_v);
     }
 
-    ret = mysql_stmt_bind_param(statement->stmt, bind);
+    ret = mysql_stmt_bind_param(statement->stmt, statement->bind);
     if (ret != 0) {
         *nrows = 0;
     }
@@ -349,32 +527,31 @@
     int i;
     int nfields;
     char *arg;
-    my_bool is_null = FALSE;
+    my_bool null_v[] = {FALSE, TRUE};
     my_bool *is_nullr;
     int ret;
-    const int FIELDSIZE = 255;
+    int nqargs;
     unsigned long *length;
     char **data;
-    MYSQL_BIND *bind;
 
     if (sql->trans && sql->trans->errnum) {
         return sql->trans->errnum;
     }
 
-    nargs = mysql_stmt_param_count(statement->stmt);
-    bind = apr_palloc(pool, nargs*sizeof(MYSQL_BIND));
+    nqargs = mysql_stmt_param_count(statement->stmt);
 
     for (i=0; i < nargs; ++i) {
-        arg = (char*)args[i];
-        bind[i].buffer_type = MYSQL_TYPE_VAR_STRING;
-        bind[i].buffer = arg;
-        bind[i].buffer_length = strlen(arg);
-        bind[i].length = &bind[i].buffer_length;
-        bind[i].is_null = &is_null;
-        bind[i].is_unsigned = 0;
+        if(i < nargs) {
+            arg = (char*)args[i];
+        }
+        else {
+            statement->bind[i].buffer_type = MYSQL_TYPE_NULL;
+            arg = 0;
+        }
+        bind_arg(&statement->bind[i], arg, null_v);
     }
 
-    ret = mysql_stmt_bind_param(statement->stmt, bind);
+    ret = mysql_stmt_bind_param(statement->stmt, statement->bind);
     if (ret == 0) {
         ret = mysql_stmt_execute(statement->stmt);
         if (!ret) {
@@ -397,12 +574,25 @@
                 data = apr_palloc(pool, nfields*sizeof(char*));
                 is_nullr = apr_pcalloc(pool, nfields*sizeof(my_bool));
                 length = apr_pcalloc(pool, nfields);
+
                 for ( i = 0; i < nfields; ++i ) {
-                    (*res)->bind[i].buffer_type = MYSQL_TYPE_VAR_STRING;
-                    (*res)->bind[i].buffer_length = FIELDSIZE;
-                    (*res)->bind[i].length = &length[i];
-                    data[i] = apr_palloc(pool, FIELDSIZE*sizeof(char));
-                    (*res)->bind[i].buffer = data[i];
+                    (*res)->bind[i].buffer_type = (*res)->res->fields[i].type;
+                    (*res)->bind[i].buffer_length = (*res)->res->fields[i].length;
+                    (*res)->bind[i].length = &length[i]; length[i] = (*res)->res->fields[i].length;
+                    /* Types handled by fetch_result_bin */
+                    if((*res)->bind[i].buffer_type == MYSQL_TYPE_TINY_BLOB 
+                       || (*res)->bind[i].buffer_type == MYSQL_TYPE_MEDIUM_BLOB
+                       || (*res)->bind[i].buffer_type == MYSQL_TYPE_LONG_BLOB
+                       || (*res)->bind[i].buffer_type == MYSQL_TYPE_BLOB
+                       || (*res)->bind[i].buffer_type == MYSQL_TYPE_BIT) {
+                        /* Make room for an optional length field */
+                        data[i] = apr_palloc(pool, sizeof(struct blob_t) + (*res)->bind[i].buffer_length);
+                        (*res)->bind[i].buffer = ((struct blob_t*)(data[i]))->data;
+                    }
+                    else {
+                        data[i] = apr_palloc(pool, (*res)->bind[i].buffer_length);
+                        (*res)->bind[i].buffer = data[i];
+                    }
                     (*res)->bind[i].is_null = is_nullr+i;
                 }
             }
@@ -415,6 +605,7 @@
     if (sql->trans) {
         sql->trans->errnum = ret;
     }
+
     return ret;
 }
 static int dbd_mysql_pvselect(apr_pool_t *pool, apr_dbd_t *sql,
@@ -425,33 +616,27 @@
     int i;
     int nfields;
     char *arg;
-    my_bool is_null = FALSE;
+    my_bool null_v[] = {FALSE, TRUE};
     my_bool *is_nullr;
     int ret;
-    const int FIELDSIZE = 255;
     unsigned long *length;
     char **data;
     int nargs;
-    MYSQL_BIND *bind;
 
     if (sql->trans && sql->trans->errnum) {
         return sql->trans->errnum;
     }
 
     nargs = mysql_stmt_param_count(statement->stmt);
-    bind = apr_palloc(pool, nargs*sizeof(MYSQL_BIND));
 
     for (i=0; i < nargs; ++i) {
-        arg = va_arg(args, char*);
-        bind[i].buffer_type = MYSQL_TYPE_VAR_STRING;
-        bind[i].buffer = arg;
-        bind[i].buffer_length = strlen(arg);
-        bind[i].length = &bind[i].buffer_length;
-        bind[i].is_null = &is_null;
-        bind[i].is_unsigned = 0;
+        if(!(arg = va_arg(args, char*))) 
+            statement->bind[i].buffer_type = MYSQL_TYPE_NULL;
+
+        bind_arg(&statement->bind[i], arg, null_v);
     }
 
-    ret = mysql_stmt_bind_param(statement->stmt, bind);
+    ret = mysql_stmt_bind_param(statement->stmt, statement->bind);
     if (ret == 0) {
         ret = mysql_stmt_execute(statement->stmt);
         if (!ret) {
@@ -474,12 +659,25 @@
                 data = apr_palloc(pool, nfields*sizeof(char*));
                 is_nullr = apr_pcalloc(pool, nfields*sizeof(my_bool));
                 length = apr_pcalloc(pool, nfields);
+
                 for ( i = 0; i < nfields; ++i ) {
-                    (*res)->bind[i].buffer_type = MYSQL_TYPE_VAR_STRING;
-                    (*res)->bind[i].buffer_length = FIELDSIZE;
-                    (*res)->bind[i].length = &length[i];
-                    data[i] = apr_palloc(pool, FIELDSIZE*sizeof(char));
-                    (*res)->bind[i].buffer = data[i];
+                    (*res)->bind[i].buffer_type = (*res)->res->fields[i].type;
+                    (*res)->bind[i].buffer_length = (*res)->res->fields[i].length;
+                    (*res)->bind[i].length = &length[i]; length[i] = (*res)->res->fields[i].length;
+                    /* Types handled by fetch_result_bin */
+                    if((*res)->bind[i].buffer_type == MYSQL_TYPE_TINY_BLOB 
+                       || (*res)->bind[i].buffer_type == MYSQL_TYPE_MEDIUM_BLOB
+                       || (*res)->bind[i].buffer_type == MYSQL_TYPE_LONG_BLOB
+                       || (*res)->bind[i].buffer_type == MYSQL_TYPE_BLOB
+                       || (*res)->bind[i].buffer_type == MYSQL_TYPE_BIT) {
+                        /* Make room for an optional length field */
+                        data[i] = apr_palloc(pool, sizeof(struct blob_t) + (*res)->bind[i].buffer_length);
+                        (*res)->bind[i].buffer = ((struct blob_t*)(data[i]))->data;
+                    }
+                    else {
+                        data[i] = apr_palloc(pool, (*res)->bind[i].buffer_length);
+                        (*res)->bind[i].buffer = data[i];
+                    }
                     (*res)->bind[i].is_null = is_nullr+i;
                 }
             }
@@ -586,6 +784,9 @@
                                    fields[1].value, fields[2].value,
                                    fields[3].value, port,
                                    fields[5].value, 0);
+
+    if(sql->conn == NULL) return NULL; /* this is important */
+
     return sql;
 }
 static apr_status_t dbd_mysql_close(apr_dbd_t *handle)
@@ -632,7 +833,8 @@
 }
 static void dbd_mysql_init(apr_pool_t *pool)
 {
-    my_init();
+    //my_init(); - called by mysql_init anyway
+
     /* FIXME: this is a guess; find out what it really does */ 
     apr_pool_cleanup_register(pool, NULL, apr_pool_cleanup_null,
                               (void*)mysql_thread_end);
